// Generated by CoffeeScript 2.0.0-beta4
var Poltergeist, browser, cmd, connection;

Poltergeist = class Poltergeist {
  constructor(port, width, height, host) {
    this.browser = new Poltergeist.Browser(width, height);
    this.browser.launch().then(() => {
      this.connection = new Poltergeist.Connection(this, port, host);
      return console.log("browser launched and connection created");
    });
  }

  // phantom.onError = (message, stack) => @onError(message, stack)
  runCommand(command) {
    return new Poltergeist.Cmd(this, command.id, command.name, command.args).run(this.browser);
  }

  sendResponse(command_id, response) {
    return this.send({
      command_id: command_id,
      response: response
    });
  }

  sendError(command_id, error) {
    return this.send({
      command_id: command_id,
      error: {
        name: error.name || 'Generic',
        args: error.args && error.args() || [error.toString()]
      }
    });
  }

  send(data) {
    this.connection.send(data);
    return true;
  }

};

// This is necessary because the remote debugger will wrap the
// script in a function, causing the Poltergeist variable to
// become local.
global.Poltergeist = Poltergeist;

Poltergeist.Error = class Error {};

Poltergeist.ObsoleteNode = (function() {
  class ObsoleteNode extends Poltergeist.Error {
    args() {
      return [];
    }

    toString() {
      return this.name;
    }

  };

  ObsoleteNode.prototype.name = "Poltergeist.ObsoleteNode";

  return ObsoleteNode;

})();

Poltergeist.InvalidSelector = (function() {
  class InvalidSelector extends Poltergeist.Error {
    constructor(method, selector) {
      super();
      this.method = method;
      this.selector = selector;
    }

    args() {
      return [this.method, this.selector];
    }

  };

  InvalidSelector.prototype.name = "Poltergeist.InvalidSelector";

  return InvalidSelector;

})();

Poltergeist.FrameNotFound = (function() {
  class FrameNotFound extends Poltergeist.Error {
    constructor(frameName) {
      super();
      this.frameName = frameName;
    }

    args() {
      return [this.frameName];
    }

  };

  FrameNotFound.prototype.name = "Poltergeist.FrameNotFound";

  return FrameNotFound;

})();

Poltergeist.MouseEventFailed = (function() {
  class MouseEventFailed extends Poltergeist.Error {
    constructor(eventName, selector, position) {
      super();
      this.eventName = eventName;
      this.selector = selector;
      this.position = position;
    }

    args() {
      return [this.eventName, this.selector, this.position];
    }

  };

  MouseEventFailed.prototype.name = "Poltergeist.MouseEventFailed";

  return MouseEventFailed;

})();

Poltergeist.KeyError = (function() {
  class KeyError extends Poltergeist.Error {
    constructor(message) {
      super();
      this.message = message;
    }

    args() {
      return [this.message];
    }

  };

  KeyError.prototype.name = "Poltergeist.KeyError";

  return KeyError;

})();

Poltergeist.JavascriptError = (function() {
  class JavascriptError extends Poltergeist.Error {
    constructor(errors) {
      super();
      this.errors = errors;
    }

    args() {
      return [this.errors];
    }

  };

  JavascriptError.prototype.name = "Poltergeist.JavascriptError";

  return JavascriptError;

})();

Poltergeist.BrowserError = (function() {
  class BrowserError extends Poltergeist.Error {
    constructor(message, stack) {
      super();
      this.message = message;
      this.stack = stack;
    }

    args() {
      return [this.message, this.stack];
    }

  };

  BrowserError.prototype.name = "Poltergeist.BrowserError";

  return BrowserError;

})();

Poltergeist.StatusFailError = (function() {
  class StatusFailError extends Poltergeist.Error {
    constructor(url, details) {
      super();
      this.url = url;
      this.details = details;
    }

    args() {
      return [this.url, this.details];
    }

  };

  StatusFailError.prototype.name = "Poltergeist.StatusFailError";

  return StatusFailError;

})();

Poltergeist.NoSuchWindowError = (function() {
  class NoSuchWindowError extends Poltergeist.Error {
    args() {
      return [];
    }

  };

  NoSuchWindowError.prototype.name = "Poltergeist.NoSuchWindowError";

  return NoSuchWindowError;

})();

Poltergeist.UnsupportedFeature = (function() {
  class UnsupportedFeature extends Poltergeist.Error {
    constructor(message) {
      super();
      this.message = message;
    }

    args() {
      return [this.message, "phantom.version"];
    }

  };

  UnsupportedFeature.prototype.name = "Poltergeist.UnsupportedFeature";

  return UnsupportedFeature;

})();

browser = require("./browser.js");

connection = require("./connection.js");

cmd = require("./cmd.js");

new Poltergeist(...process.argv.slice(2));
